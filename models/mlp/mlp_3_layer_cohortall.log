Dataset Shape: (74204, 64)
Fold 1/5--------------------------
Training Fold Label Distr: {0: 8103, 1: 3473}
<class 'models.mlp.mlp_3_layer.mlp_3_layer'>
Nested 1/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([1, 64])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 32])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6999
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5037
Nested 2/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([1, 128])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5069
Nested 3/5
Model Params:
	fc1.weight: torch.Size([512, 63])
	fc1.bias: torch.Size([512])
	fc2.weight: torch.Size([256, 512])
	fc2.bias: torch.Size([256])
	fc3.weight: torch.Size([1, 256])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 128])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5012
Nested 4/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([1, 128])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5040
Nested 5/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([1, 64])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 32])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5073
Optimal Threshold (Max Youden's J): 7.3700
FRAX Train:
	Accuracy: 0.5942
	Precision: 0.3578
	Recall: 0.4434
	F1-score: 0.3960
	AUC: 0.5684
FRAX Test:
	Accuracy: 0.6365
	Precision: 0.0671
	Recall: 0.4044
	F1-score: 0.1151
	AUC: 0.5485
[FINAL TEST]:
	Accuracy: 0.9415
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5064


Fold 2/5--------------------------
Training Fold Label Distr: {0: 8103, 1: 3473}
<class 'models.mlp.mlp_3_layer.mlp_3_layer'>
Nested 1/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([1, 64])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 32])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6999
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5055
Nested 2/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([1, 128])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5243
Nested 3/5
Model Params:
	fc1.weight: torch.Size([512, 63])
	fc1.bias: torch.Size([512])
	fc2.weight: torch.Size([256, 512])
	fc2.bias: torch.Size([256])
	fc3.weight: torch.Size([1, 256])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 128])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5147
Nested 4/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([1, 128])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6821
	Precision: 0.2439
	Recall: 0.0288
	F1-score: 0.0515
	AUC: 0.5041
Nested 5/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([1, 64])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 32])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4869
Optimal Threshold (Max Youden's J): 7.3900
FRAX Train:
	Accuracy: 0.5911
	Precision: 0.3511
	Recall: 0.4282
	F1-score: 0.3858
	AUC: 0.5631
FRAX Test:
	Accuracy: 0.6390
	Precision: 0.0745
	Recall: 0.4528
	F1-score: 0.1280
	AUC: 0.5765
[FINAL TEST]:
	Accuracy: 0.9415
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5071


Fold 3/5--------------------------
Training Fold Label Distr: {0: 8103, 1: 3473}
<class 'models.mlp.mlp_3_layer.mlp_3_layer'>
Nested 1/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([1, 64])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 32])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6999
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5202
Nested 2/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([1, 128])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5170
Nested 3/5
Model Params:
	fc1.weight: torch.Size([512, 63])
	fc1.bias: torch.Size([512])
	fc2.weight: torch.Size([256, 512])
	fc2.bias: torch.Size([256])
	fc3.weight: torch.Size([1, 256])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 128])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5023
Nested 4/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([1, 128])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5130
Nested 5/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([1, 64])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 32])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5028
Optimal Threshold (Max Youden's J): 5.9000
FRAX Train:
	Accuracy: 0.5083
	Precision: 0.3331
	Recall: 0.6378
	F1-score: 0.4377
	AUC: 0.5663
FRAX Test:
	Accuracy: 0.4669
	Precision: 0.0647
	Recall: 0.6025
	F1-score: 0.1168
	AUC: 0.5506
[FINAL TEST]:
	Accuracy: 0.9415
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5152


Fold 4/5--------------------------
Training Fold Label Distr: {0: 8101, 1: 3472}
<class 'models.mlp.mlp_3_layer.mlp_3_layer'>
Nested 1/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([1, 64])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 32])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6981
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5003
Nested 2/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([1, 128])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5009
Nested 3/5
Model Params:
	fc1.weight: torch.Size([512, 63])
	fc1.bias: torch.Size([512])
	fc2.weight: torch.Size([256, 512])
	fc2.bias: torch.Size([256])
	fc3.weight: torch.Size([1, 256])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 128])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5112
Nested 4/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([1, 128])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6966
	Precision: 0.3000
	Recall: 0.0086
	F1-score: 0.0168
	AUC: 0.5178
Nested 5/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([1, 64])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 32])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7005
	Precision: 1.0000
	Recall: 0.0014
	F1-score: 0.0029
	AUC: 0.5279
Optimal Threshold (Max Youden's J): 5.5500
FRAX Train:
	Accuracy: 0.4952
	Precision: 0.3327
	Recall: 0.6789
	F1-score: 0.4466
	AUC: 0.5657
FRAX Test:
	Accuracy: 0.4193
	Precision: 0.0666
	Recall: 0.6847
	F1-score: 0.1213
	AUC: 0.5781
[FINAL TEST]:
	Accuracy: 0.9414
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4953


Fold 5/5--------------------------
Training Fold Label Distr: {0: 8103, 1: 3473}
<class 'models.mlp.mlp_3_layer.mlp_3_layer'>
Nested 1/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([1, 64])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 32])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6999
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5210
Nested 2/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([1, 128])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5207
Nested 3/5
Model Params:
	fc1.weight: torch.Size([512, 63])
	fc1.bias: torch.Size([512])
	fc2.weight: torch.Size([256, 512])
	fc2.bias: torch.Size([256])
	fc3.weight: torch.Size([1, 256])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 128])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5046
Nested 4/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([1, 128])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5308
Nested 5/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([1, 64])
	fc3.bias: torch.Size([1])
	fc_out.weight: torch.Size([1, 32])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6911
	Precision: 0.3333
	Recall: 0.0303
	F1-score: 0.0555
	AUC: 0.5070
Optimal Threshold (Max Youden's J): 7.4700
FRAX Train:
	Accuracy: 0.5969
	Precision: 0.3548
	Recall: 0.4198
	F1-score: 0.3846
	AUC: 0.5662
FRAX Test:
	Accuracy: 0.6505
	Precision: 0.0745
	Recall: 0.4355
	F1-score: 0.1272
	AUC: 0.5721
[FINAL TEST]:
	Accuracy: 0.9415
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4939


