Dataset Shape: (74204, 64)
Fold 1/5--------------------------
Training Fold Label Distr: {0: 8103, 1: 3473}
<class 'models.mlp.mlp_5_layer.mlp_5_layer'>
Nested 1/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([128, 64])
	fc3.bias: torch.Size([128])
	fc4.weight: torch.Size([80, 128])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6999
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4820
Nested 2/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([256, 128])
	fc3.bias: torch.Size([256])
	fc4.weight: torch.Size([80, 256])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5004
Nested 3/5
Model Params:
	fc1.weight: torch.Size([512, 63])
	fc1.bias: torch.Size([512])
	fc2.weight: torch.Size([256, 512])
	fc2.bias: torch.Size([256])
	fc3.weight: torch.Size([512, 256])
	fc3.bias: torch.Size([512])
	fc4.weight: torch.Size([80, 512])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6937
	Precision: 0.2667
	Recall: 0.0115
	F1-score: 0.0221
	AUC: 0.4999
Nested 4/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([256, 128])
	fc3.bias: torch.Size([256])
	fc4.weight: torch.Size([80, 256])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4904
Nested 5/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([128, 64])
	fc3.bias: torch.Size([128])
	fc4.weight: torch.Size([80, 128])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5108
Optimal Threshold (Max Youden's J): 7.3700
FRAX Train:
	Accuracy: 0.5942
	Precision: 0.3578
	Recall: 0.4434
	F1-score: 0.3960
	AUC: 0.5684
FRAX Test:
	Accuracy: 0.6365
	Precision: 0.0671
	Recall: 0.4044
	F1-score: 0.1151
	AUC: 0.5485
[FINAL TEST]:
	Accuracy: 0.9415
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5145


Fold 2/5--------------------------
Training Fold Label Distr: {0: 8103, 1: 3473}
<class 'models.mlp.mlp_5_layer.mlp_5_layer'>
Nested 1/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([128, 64])
	fc3.bias: torch.Size([128])
	fc4.weight: torch.Size([80, 128])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6999
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4923
Nested 2/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([256, 128])
	fc3.bias: torch.Size([256])
	fc4.weight: torch.Size([80, 256])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6959
	Precision: 0.2353
	Recall: 0.0058
	F1-score: 0.0112
	AUC: 0.5356
Nested 3/5
Model Params:
	fc1.weight: torch.Size([512, 63])
	fc1.bias: torch.Size([512])
	fc2.weight: torch.Size([256, 512])
	fc2.bias: torch.Size([256])
	fc3.weight: torch.Size([512, 256])
	fc3.bias: torch.Size([512])
	fc4.weight: torch.Size([80, 512])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5250
Nested 4/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([256, 128])
	fc3.bias: torch.Size([256])
	fc4.weight: torch.Size([80, 256])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5159
Nested 5/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([128, 64])
	fc3.bias: torch.Size([128])
	fc4.weight: torch.Size([80, 128])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4721
Optimal Threshold (Max Youden's J): 7.3900
FRAX Train:
	Accuracy: 0.5911
	Precision: 0.3511
	Recall: 0.4282
	F1-score: 0.3858
	AUC: 0.5631
FRAX Test:
	Accuracy: 0.6390
	Precision: 0.0745
	Recall: 0.4528
	F1-score: 0.1280
	AUC: 0.5765
[FINAL TEST]:
	Accuracy: 0.9353
	Precision: 0.0660
	Recall: 0.0081
	F1-score: 0.0144
	AUC: 0.5031


Fold 3/5--------------------------
Training Fold Label Distr: {0: 8103, 1: 3473}
<class 'models.mlp.mlp_5_layer.mlp_5_layer'>
Nested 1/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([128, 64])
	fc3.bias: torch.Size([128])
	fc4.weight: torch.Size([80, 128])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6999
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5141
Nested 2/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([256, 128])
	fc3.bias: torch.Size([256])
	fc4.weight: torch.Size([80, 256])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6881
	Precision: 0.2985
	Recall: 0.0288
	F1-score: 0.0525
	AUC: 0.4924
Nested 3/5
Model Params:
	fc1.weight: torch.Size([512, 63])
	fc1.bias: torch.Size([512])
	fc2.weight: torch.Size([256, 512])
	fc2.bias: torch.Size([256])
	fc3.weight: torch.Size([512, 256])
	fc3.bias: torch.Size([512])
	fc4.weight: torch.Size([80, 512])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4959
Nested 4/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([256, 128])
	fc3.bias: torch.Size([256])
	fc4.weight: torch.Size([80, 256])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5086
Nested 5/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([128, 64])
	fc3.bias: torch.Size([128])
	fc4.weight: torch.Size([80, 128])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4749
Optimal Threshold (Max Youden's J): 5.9000
FRAX Train:
	Accuracy: 0.5083
	Precision: 0.3331
	Recall: 0.6378
	F1-score: 0.4377
	AUC: 0.5663
FRAX Test:
	Accuracy: 0.4669
	Precision: 0.0647
	Recall: 0.6025
	F1-score: 0.1168
	AUC: 0.5506
[FINAL TEST]:
	Accuracy: 0.9415
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5087


Fold 4/5--------------------------
Training Fold Label Distr: {0: 8101, 1: 3472}
<class 'models.mlp.mlp_5_layer.mlp_5_layer'>
Nested 1/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([128, 64])
	fc3.bias: torch.Size([128])
	fc4.weight: torch.Size([80, 128])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5050
Nested 2/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([256, 128])
	fc3.bias: torch.Size([256])
	fc4.weight: torch.Size([80, 256])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5059
Nested 3/5
Model Params:
	fc1.weight: torch.Size([512, 63])
	fc1.bias: torch.Size([512])
	fc2.weight: torch.Size([256, 512])
	fc2.bias: torch.Size([256])
	fc3.weight: torch.Size([512, 256])
	fc3.bias: torch.Size([512])
	fc4.weight: torch.Size([80, 512])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5020
Nested 4/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([256, 128])
	fc3.bias: torch.Size([256])
	fc4.weight: torch.Size([80, 256])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7001
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4984
Nested 5/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([128, 64])
	fc3.bias: torch.Size([128])
	fc4.weight: torch.Size([80, 128])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7001
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5405
Optimal Threshold (Max Youden's J): 5.5500
FRAX Train:
	Accuracy: 0.4952
	Precision: 0.3327
	Recall: 0.6789
	F1-score: 0.4466
	AUC: 0.5657
FRAX Test:
	Accuracy: 0.4193
	Precision: 0.0666
	Recall: 0.6847
	F1-score: 0.1213
	AUC: 0.5781
[FINAL TEST]:
	Accuracy: 0.9414
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4952


Fold 5/5--------------------------
Training Fold Label Distr: {0: 8103, 1: 3473}
<class 'models.mlp.mlp_5_layer.mlp_5_layer'>
Nested 1/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([128, 64])
	fc3.bias: torch.Size([128])
	fc4.weight: torch.Size([80, 128])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6999
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5096
Nested 2/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([256, 128])
	fc3.bias: torch.Size([256])
	fc4.weight: torch.Size([80, 256])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6492
	Precision: 0.2825
	Recall: 0.1094
	F1-score: 0.1577
	AUC: 0.5140
Nested 3/5
Model Params:
	fc1.weight: torch.Size([512, 63])
	fc1.bias: torch.Size([512])
	fc2.weight: torch.Size([256, 512])
	fc2.bias: torch.Size([256])
	fc3.weight: torch.Size([512, 256])
	fc3.bias: torch.Size([512])
	fc4.weight: torch.Size([80, 512])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.6998
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4991
Nested 4/5
Model Params:
	fc1.weight: torch.Size([256, 63])
	fc1.bias: torch.Size([256])
	fc2.weight: torch.Size([128, 256])
	fc2.bias: torch.Size([128])
	fc3.weight: torch.Size([256, 128])
	fc3.bias: torch.Size([256])
	fc4.weight: torch.Size([80, 256])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5296
Nested 5/5
Model Params:
	fc1.weight: torch.Size([128, 63])
	fc1.bias: torch.Size([128])
	fc2.weight: torch.Size([64, 128])
	fc2.bias: torch.Size([64])
	fc3.weight: torch.Size([128, 64])
	fc3.bias: torch.Size([128])
	fc4.weight: torch.Size([80, 128])
	fc4.bias: torch.Size([80])
	fc5.weight: torch.Size([64, 80])
	fc5.bias: torch.Size([64])
	fc_out.weight: torch.Size([1, 64])
	fc_out.bias: torch.Size([1])
[NESTED_FOLD]:
	Accuracy: 0.7002
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.4922
Optimal Threshold (Max Youden's J): 7.4700
FRAX Train:
	Accuracy: 0.5969
	Precision: 0.3548
	Recall: 0.4198
	F1-score: 0.3846
	AUC: 0.5662
FRAX Test:
	Accuracy: 0.6505
	Precision: 0.0745
	Recall: 0.4355
	F1-score: 0.1272
	AUC: 0.5721
[FINAL TEST]:
	Accuracy: 0.9415
	Precision: 0.0000
	Recall: 0.0000
	F1-score: 0.0000
	AUC: 0.5061


